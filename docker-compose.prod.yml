version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: uno-tracker-db-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - uno-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: uno-tracker-redis-prod
    restart: always
    volumes:
      - redis_data_prod:/data
    networks:
      - uno-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: uno-tracker-backend-prod
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      FRONTEND_URL_DEV: ${FRONTEND_URL_DEV}
      BACKEND_URL: ${BACKEND_URL}
      COOKIE_SECURE: ${COOKIE_SECURE:-true}
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8000:8000"
    networks:
      - uno-network-prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database migrations
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: uno-tracker-migrations-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    command: alembic upgrade head
    networks:
      - uno-network-prod
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: uno-tracker-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - uno-network-prod
    depends_on:
      - backend

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  uno-network-prod:
    driver: bridge
