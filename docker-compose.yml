version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: uno-tracker-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-uno_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-uno_password}
      POSTGRES_DB: ${POSTGRES_DB:-uno_tracker}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - uno-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-uno_user} -d ${POSTGRES_DB:-uno_tracker}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional, for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: uno-tracker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - uno-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: uno-tracker-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-uno_user}:${POSTGRES_PASSWORD:-uno_password}@db:5432/${POSTGRES_DB:-uno_tracker}
      
      # JWT Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # URLs
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      FRONTEND_URL_DEV: ${FRONTEND_URL_DEV:-http://localhost:3000}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8000}
      
      # Security
      COOKIE_SECURE: ${COOKIE_SECURE:-false}
      
      # Redis (if needed)
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src:ro
      - ./alembic:/app/alembic:ro
      - ./alembic.ini:/app/alembic.ini:ro
    networks:
      - uno-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database migrations (run once)
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: uno-tracker-migrations
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-uno_user}:${POSTGRES_PASSWORD:-uno_password}@db:5432/${POSTGRES_DB:-uno_tracker}
    command: alembic upgrade head
    volumes:
      - ./alembic:/app/alembic:ro
      - ./alembic.ini:/app/alembic.ini:ro
      - ./src:/app/src:ro
    networks:
      - uno-network
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  uno-network:
    driver: bridge
